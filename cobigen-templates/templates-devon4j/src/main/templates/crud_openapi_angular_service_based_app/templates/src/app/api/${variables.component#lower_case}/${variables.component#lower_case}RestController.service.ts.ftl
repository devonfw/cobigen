/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the CobiGen code generator program.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
<#compress>
import { Observable }                                        from 'rxjs';
import { environment } from '../../../environments/environment';

<#assign entityRef = "false">

<#list model.paths as path>
  <#list path.operations as operation>
    <#list operation.responses as response>
      <#if response.entityRef??>
      	<#assign entityRef = response.entityRef>
      </#if>
    </#list>
  </#list>
</#list>

<#if entityRef != "false">
import { ${entityRef.name} } from '../../model/${entityRef.name?lower_case}';
</#if>
</#compress>

@Injectable()
export class ${variables.component?cap_first}RestControllerService {

    protected basePath: string = environment.restPathRoot;
    public defaultHeaders: HttpHeaders = new HttpHeaders();

    constructor(private httpClient: HttpClient) {}
<#list model.paths as path>
<#list path.operations as operation>

    /**
     * <#if operation.operationId??>${operation.operationId}</#if>
     *
     * @param query query
     */
    public <#if operation.operationId??>${operation.operationId}</#if>(query?: string): Observable<<#if entityRef != "false">${entityRef.name}</#if>> {

        let queryParameters: HttpParams = new HttpParams();
        if (query !== undefined) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers: HttpHeaders = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*',
        ];

        headers = headers.set('Accept', httpHeaderAccepts);

        return this.httpClient.get<<#if entityRef != "false">${entityRef.name}</#if>>(`${r"${this.basePath}"}/${variables.component?lower_case}<#if operation.summary??>/${operation.summary}</#if><#if path.pathURI??>${path.pathURI}</#if>${r"${encodeURIComponent(String(query))}"}`,
            {
                params: queryParameters,
                headers: headers,
            },
        );
    }</#list></#list>
}
