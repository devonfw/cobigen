/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the CobiGen code generator program.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
<#compress>
import { Observable }                                        from 'rxjs';
import { environment } from '../../../environments/environment';

<#assign entityRef = "false">

<#list model.paths as path>
  <#list path.operations as operation>
    <#list operation.responses as response>
      <#if response.entityRef??>
      	<#assign entityRef = response.entityRef>
      </#if>
    </#list>
  </#list>
</#list>

<#if entityRef != "false">
import { ${entityRef.name} } from '../../model/${entityRef.name?lower_case}';
</#if>
</#compress>

@Injectable()
export class ${variables.component?cap_first}RestControllerService {

    protected basePath: string = environment.restPathRoot;
    public defaultHeaders: HttpHeaders = new HttpHeaders();

    constructor(protected httpClient: HttpClient) {}


<#list model.paths as path>
<#list path.operations as operation>
  <#if operation.type??>  // Operation type: ${operation.type}</#if>
  <#if operation.description??>  // Operation description: ${operation.description}</#if>
  <#if operation.tag??>  //  Operation tag:<#list operation.tags as tag> ${operation.tag} </#list></#if>
  <#if operation.responses??>  //  <#list operation.responses as response> <#if response.type??> Response type: ${response.type}</#if>
  <#if response.code??>  // Response code: ${response.code}</#if>
  <#if response.description??>  // Response description: ${response.description}</#if>
  <#if response.mediaTypes??>  // <#list response.mediaTypes as mediaType> Media Type: ${mediaType}</#list></#if>
  <#if response.parameters??>  // <#list response.parameters as parameter> Parameter: ${parameter.mediaType}</#list></#if></#list></#if>
  	
  	<#if path.version??>	
    /**
     * Path version: ${path.version}
     */
  	</#if>
  
  
    /**
     * <#if operation.operationId??>${operation.operationId}</#if>
     *
     * @param query query
     */
    public <#if operation.operationId??>${operation.operationId}</#if>(query?: string): Observable<<#if entityRef != "false">${entityRef.name}</#if>> {

        let queryParameters: HttpParams = new HttpParams();
        if (query !== undefined) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers: HttpHeaders = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*',
        ];

        headers = headers.set("Accept", httpHeaderAccepts);

        return this.httpClient.get<<#if entityRef != "false">${entityRef.name}</#if>>(`${r"${this.basePath}"}/${variables.component?lower_case}<#if operation.summary??>/${operation.summary}</#if><#if path.pathURI??>${path.pathURI}</#if>${r"${encodeURIComponent(String(query))}"}`,
            {
                params: queryParameters,
                headers: headers
            }
        );
    }
  		</#list>
	</#list>

}
