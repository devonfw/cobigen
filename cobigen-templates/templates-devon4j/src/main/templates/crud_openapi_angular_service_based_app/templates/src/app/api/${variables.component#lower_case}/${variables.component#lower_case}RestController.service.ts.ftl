/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the CobiGen code generator program.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';
<#compress>
import { Observable }                                        from 'rxjs';

<#assign entityRef = "false">

<#list model.paths as path>
  <#list path.operations as operation>
    <#list operation.responses as response>
      <#if response.entityRef??>
      	<#assign entityRef = response.entityRef>        
      </#if>      
    </#list>
  </#list>
</#list>

<#if entityRef != "false">
import { ${entityRef.name} } from '../../model/${entityRef.name?lower_case}';
</#if>
</#compress>
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

@Injectable()
export class ${variables.component?cap_first}RestControllerService {

    protected basePath = 'https://localhost:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

	<#list model.paths as path>
  		<#list path.operations as operation>
  		
  <#if operation.type??>  // Operation type: ${operation.type} </#if>
  <#if operation.description??>  // Operation description: ${operation.description} </#if>
  <#if operation.tag??>  //  Operation tag:<#list operation.tags as tag> ${operation.tag} </#list> </#if>
  <#if operation.responses??>  //  <#list operation.responses as response> <#if response.type??> Response type: ${response.type} </#if>
  <#if response.code??>  // Response code: ${response.code} </#if>
  <#if response.description??>  // Response description: ${response.description} </#if>
  <#if response.mediaTypes??>  // <#list response.mediaTypes as mediaType> Media Type: ${mediaType} </#list> </#if> 
  <#if response.parameters??>  // <#list response.parameters as parameter> Parameter: ${parameter.mediaType} </#list> </#if> </#list> </#if>
  	
  	<#if path.version??>	
  	/**
  	* Path version: ${path.version}
  	**/
  	</#if>
  	
  	
  	/**
     * <#if operation.operationId??>${operation.operationId}</#if>
     * 
     * @param query query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public <#if operation.operationId??>${operation.operationId}</#if>(query?: string, observe?: 'body', reportProgress?: boolean): Observable<<#if entityRef != "false">${entityRef.name}</#if>>;
    public <#if operation.operationId??>${operation.operationId}</#if>(query?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<<#if entityRef != "false">${entityRef.name}</#if>>>;
    public <#if operation.operationId??>${operation.operationId}</#if>(query?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<<#if entityRef != "false">${entityRef.name}</#if>>>;
    public <#if operation.operationId??>${operation.operationId}</#if>(query?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
        ];

        return this.httpClient.get<<#if entityRef != "false">${entityRef.name}</#if>>(`${r"${this.basePath}"}/${variables.component?lower_case}<#if operation.summary??>/${operation.summary}</#if><#if path.pathURI??>${path.pathURI}</#if>${r"${encodeURIComponent(String(query))}"}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
            }
        );
    }
  		</#list>
	</#list>

}
