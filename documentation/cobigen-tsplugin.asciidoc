:toc:
toc::[]

= TypeScript Plug-in

The TypeScript Plug-in enables merging result TS files to existing ones. This plug-in is used at the moment for generate an Angular2 client with all CRUD functionalities enabled. The plug-in also generates de i18n functionality just appending at the end of the word the ES or EN suffixes, to put into the developer knowledge that this words must been translated to the correspondent language. Currently, the generation of Angular2 client requires an ETO java object as input so, there is no need to implement an input reader for ts artifacts for the moment.

== Trigger Extensions

As for the Angular2 generation the input is a java object, the trigger expressions (including matchers and variable assignments) are implemented as link:https://github.com/devonfw/tools-cobigen/wiki/cobigen-javaplugin#trigger-extension[Java]. 

== Merger extensions
This plugin uses the https://github.com/oasp/ts-merger[OASP TypeScript Merger] to merge files. There are currently two merge strategies:

* merge strategy `tsmerge` (add the new code respecting the existing is case of conflict)
* merge strategy `tsmerge_override` (add the new code overwriting the existent in case of conflict)

The merge algorithm mainly handles the following AST nodes:

* *ImportDeclaration*
** Will add non existent imports whatever the merge strategy is.
** For different imports from same module, the import clauses will be merged.
+
[source,ts]
import { a } from 'b';
import { c } from 'b';
//Result
import { a, c } from 'b';

* *ClassDeclaration*
** Adds non existent base properties from patch based on the name property.
** Adds non existent base methods from patch based on the name signature.
** Adds non existent annotations to class, properties and methods.
* *PropertyDeclaration*
** Adds non existent decorators.
** Merge existent decorators.
** With override startegy, the value of the property will be replaced by the patch value.
* *MethodDeclaration*
** With override startegy, the body will be replaced.
** The parameters will be merged.
* *ParameterDeclaration*
** Replace type and modifiers with override merge strategy, adding non existent from patch into base.
* *ConstructorDeclaration*
** Merged in the same way as Method is.
* *FunctionDeclaration*
** Merged in the same way as Method is.




