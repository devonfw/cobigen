<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by TaglibToXSD. + Mark A. Ziesemer, http://www.ziesemer.com + 2008-03-25 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0" xml:lang="en" elementFormDefault="qualified" targetNamespace="http://java.sun.com/jsf/html">
  <xs:annotation>
    <xs:documentation>This tag library contains JavaServer Faces component tags for all UIComponent + HTML RenderKit Renderer combinations defined in the JavaServer Faces Specification.</xs:documentation>
    <xs:documentation>tlib-version: 1.2</xs:documentation>
  </xs:annotation>
  <xs:element name="commandButton">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p><span
            class="changed_modified_2_0">Renders an HTML "input"
            element.</p>
            
            <p>Decode Behavior</p>
            
            <ul>
            
            <p>Obtain the <code>Map</code> from the "requestParameterMap"
            property of the <code>ExternalContext</code>.  If the value in the
            <code>Map</code> for the value of the "clientId" property of the
            component is <code>null</code>, create a String by concatenating
            the value of the "clientId" property of the component with the
            String ".x" (without the quotes).  Create another String in the
            same manner, but concatenate ".y" (without the quotes).  If
            <code>null</code> is the value in the <code>Map</code> for both
            Strings, return from <code>decode()</code>.  If the value in the
            <code>Map</code> for the value of the "clientId" property of the
            component is not <code>null</code>, get the value of the "type"
            attribute, and convert it to lower case.  If the result is equal
            to the String "reset" (without the quotes), return from
            <code>decode()</code>.  Otherwise, create a
            <code>javax.faces.event.ActionEvent</code> around the component,
            and pass it to the <code>queueEvent()</code> method of the
            component, which must be an instance of
            <code>UICommand</code>.</p>
            
            </ul>
            
            
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>Render the clientId of the component as the value of the "name"
            attribute.  Render the current value of the component as the value
            of the "value" attribute. If "image" attribute is specified render
            it as the value of the "src" attribute after passing it to the
            <code>getResourceURL()</code> method of the
            <code>ViewHandler</code> for this application, and passing the
            result through the <code>encodeResourceURL()</code> method of the
            <code>ExternalContext</code>.  <span
            class="changed_added_2_0">Note that calling
            <code>getResourceURL()</code> will prefix the context-root of the
            current application if the value of the "src" attribute starts
            with "/".</span>  When handling the "image" attribute, the value must not
            be escaped.  For example, <code>&</code> must not be turned into
            <code>&amp;amp;</code>.  If the "styleClass" attribute is
            specified, render its value as the value of the "class" attribute.
            If the user has specified an "onclick" attribute, append that
            JavaScript to any existing JavaScript before rendering.</p>
            
            <p class="changed_added_2_0">If the component being rendered by
            this renderer has any <code>UIParameter</code> children, each one
            of them must be rendered using the renderer for component-family:
            "javax.faces.Input" and renderer-type: "javax.faces.Hidden".  For
            discussion, this is called the hiddenRenderer.  A component with
            component-type "javax.faces.Input" must be created for local use
            in rendering each <code>UIParameter</code> child.  The "id"
            property of the temporary component must be set to the "name" of
            the <code>UIParameter</code>.  The "value" property of the
            temporary component must be set to the "value" of the
            <code>UIParameter</code>.  For each <code>UIParameter</code>
            child, the hiddenRenderer must have its
            <code>encodeBegin()</code>, <code>encodeChildren()</code>, and
            <code>encodeEnd()</code> methods called, in order, passing the
            temporary component as the second argument.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.CommandButtonTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="action">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing the application action to invoke
                when this component is activated by the user.  The expression
                must evaluate to a public method that takes no parameters, and
                returns an Object (the toString() of which is called to derive
                the logical outcome) which is passed to the NavigationHandler
                for this application.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="actionListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing an action listener method that
                will be notified when this component is activated by the user.
                The expression must evaluate to a public method that takes an
                ActionEvent parameter, with a return type of void, <span
                class="changed_added_2_0">or to a public method that takes no
                arguments with a return type of void.  In the latter case, the
                method has no way of easily knowing where the event came from,
                but this can be useful in cases where a notification is needed
                that "some action happened".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that, if this component is activated by the user,
                notifications should be delivered to interested listeners and actions
                immediately (that is, during Apply Request Values phase) rather than
                waiting until Invoke Application phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="alt">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Alternate textual description of the
                element rendered by this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="image">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                Absolute or relative URL of the
                image to be displayed for this
                button.  If specified, this
                "input" element will be of type
                "image".  Otherwise, it will be
                of the type specified by the
                "type" property with a label
                specified by the "value"
                property.  <span
                class="changed_added_2_0">Note
                that if the value of this
                attribute starts with "/", the
                rendered value for this
                attribute will be prefixed with
                the context-root for this
                application.</span>
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Type of button to create.  Valid values are "submit", "button",
                and "reset".  If not specified, or not a valid value, the default
                value is "submit".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="commandLink">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p><span
            class="changed_modified_2_0">Render</span> an HTML "a" anchor
            element that acts like a form submit button when
            clicked.</p>
            
            <p>General Behaviour</p>
            
            <p>Both the encode and decode behavior require the ability to get
            the id/name for a hidden field, <span
            class="changed_added_2_0">which may be rendered in markup or which
            may be programmatically added via client DOM manipulation</span>,
            whose value is set by the JavaScript form submit.  This name must
            be constructed as follows:</p>
            
            <ul>
            
            <li><p>Get the clientId for the form of which this component is a
            child.</p></li>
            
            <li><p>Append
            <code>NamingContainer.SEPARATOR_CHAR</code>.</p></li>
            
            <li><p>Append a constant string that is the same for all command
            link components in the tree.</p></li>
            
            </ul>
            
            <p>In the following text, this String is called
            hiddenFieldName.</p>
            
            <p>Decode Behavior</p>
            
            <ul>
            
            <p>Obtain the "clientId" property of the component.  Obtain the
            <code>Map</code> from the "requestParameterMap" property of the
            <code>ExternalContext</code>.  Derive hiddenFieldName as above.
            Get the entry in the <code>Map</code> under the key that is the
            hiddenFieldName.  If the there is no entry, or the entry is the
            empty String, or the entry is not equal to the value of the
            "clientId" property, return immediately.  If there is an entry,
            and its value is equal to the value of the "clientId" property,
            create a new <code>javax.faces.event.ActionEvent</code> instance
            around the component and call <code>queueActionEvent()</code> on
            the component, passing the event.</p>
            
            </ul>
            
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>If the value of the <code>disabled</code> attribute is
            <code>true</code>, render a span element.  Render all the passthru
            attributes and the <code>target</code> attribute as pass-through
            attributes on the span, even though the <code>target</code>
            attribute will have no effect on a span.  Render the current value
            of the component as the content of the span.  Return.</p>
            
            <p>If the <code>disabled</code> attribute is not present, or its
            value is <code>false</code>, render an HTML <code>a</code>
            element.  Render "#" as the value of the "href" attribute. Render
            the current value of the component as the link text if it is
            specified. Render JavaScript that is functionally equivalent to
            the following as the value of the "onclick" attribute:</p>
            
            <p><code>document.forms['CLIENT_ID']['hiddenFieldName'].value='CLIENT_ID';
            document.forms['CLIENT_ID']['PARAM1_NAME'].value='PARAM1_VALUE';
            document.forms['CLIENT_ID']['PARAM2_NAME'].value='PARAM2_VALUE';
            return false;</code></p>
            
            <p>document.forms['CLIENT_ID'].submit()" where hiddenFieldName is
            as described above, CLIENT_ID is the clientId of the UICommand
            component, PARAM*_NAME and PARAM*_VALUE are the names and values,
            respectively, of any nested UIParameter children.  The name and
            the value must be URLEncoded.  If an "onclick" attribute was
            specified by the user, render this JavaScript in a function,
            and render the user's JavaScript in a function.  Render both functions
            in a choice function as follows:</p>
            
            <p><code>var a=function(){#USER_FUNCTION#};
            var b=function(){#JSF_FUNCTION#};
            return (a()==false) ? false : b();</code></p>
            
            <p>where #USER_FUNCTION# is the user's JavaScript and
            #JSF_FUNCTION# is the JavaScript rendered by JSF.  The choice
            function should operate such that if the user's JavaScript returns
            true, then the rendered JavaScript will also execute.</p>
            
            <p>If the "styleClass" attribute is specified, render its value as
            the value of the "class" attribute.  Render any non-UIParameter
            output children as normal inside of the "a" element.  These will
            appear as the link text.  Allow the form renderer to output a
            single "input" element (for the entire page, regardless of how
            many command link components are in the page) of "type" "hidden"
            whose "name" is the value of hiddenFieldName, and which must not
            have a "value" attribute.  Multiple occurrences of command link
            components in the tree should not cause multiple hiddenFieldName
            hidden fields.  Allow the form renderer to output an "input"
            element of "type" "hidden" for each of the nested UIParameter
            children, taking the name property (but not the value) from each
            one in turn.  If the "disabled" attribute is specified, do not
            render the HTML "a" anchor element or its "href" attribute.
            Instead, render a "span" element.  If the "styleClass" attribute
            is specified, render its value as the value of the "class"
            attribute on the "span".  Render any pass-through attributes on
            the "span".  The content of the span element comes from the value
            of the component or its children as specified above.</p>
            
            <p>If the user specified a <code>target</code> attribute, its
            value must be set using javascript since the <code>onclick</code>
            handler will prevent the target attribute from being generated.
            This must be accomplished using JavaScript that is equivalent to
            the following.</p>
            
            <p><code>document.forms['CLIENT_ID'].target='TARGET';</code></p>
            
            <p>Where TARGET is the value of the target attribute on the JSP
            tag.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.CommandLinkTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="action">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing the application action to invoke
                when this component is activated by the user.  The expression
                must evaluate to a public method that takes no parameters, and
                returns an Object (the toString() of which is called to derive
                the logical outcome) which is passed to the NavigationHandler
                for this application.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="actionListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing an action listener method that
                will be notified when this component is activated by the user.
                The expression must evaluate to a public method that takes an
                ActionEvent parameter, with a return type of void, <span
                class="changed_added_2_0">or to a public method that takes no
                arguments with a return type of void.  In the latter case, the
                method has no way of easily knowing where the event came from,
                but this can be useful in cases where a notification is needed
                that "some action happened".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that, if this component is activated by the user,
                notifications should be delivered to interested listeners and actions
                immediately (that is, during Apply Request Values phase) rather than
                waiting until Invoke Application phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="charset">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The character encoding of the resource designated
                by this hyperlink.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="coords">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The position and shape of the hot spot on the screen
                (for use in client-side image maps).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never
                receive focus or be included in a subsequent
                submit.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hreflang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The language code of the resource designated
                by this hyperlink.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rel">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The relationship from the current document
                to the anchor specified by this hyperlink.
                The value of this attribute is a space-separated
                list of link types.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rev">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A reverse link from the anchor specified
                by this hyperlink to the current document.
                The value of this attribute is a space-separated
                list of link types.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="shape">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The shape of the hot spot on the screen
                (for use in client-side image maps).  Valid
                values are:  default (entire region); rect
                (rectangular region); circle (circular region);
                and poly (polygonal region).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="target">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name of a frame where the resource
                retrieved via this hyperlink is to
                be displayed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The content type of the resource designated
                by this hyperlink.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="dataTable">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Renders an HTML "table" element compliant with the HTML 401
            specification.  Render the "caption" facet, if present, inside a
            "caption" element immediately below the "table" element.  If the
            "captionClass" attribute is specified, render its value as the
            value of the "class" attribute on the "caption" element.  If the
            "captionStyle" attribute is specified, render its value as the
            value of the "style" attribute on the "caption" element.</p>
            <p>Please consult the javadoc for <code>UIData</code> to
            supplement this specification.  If the "styleClass" attribute is
            specified, render its value as the value of the "class" attribute
            on the "table" element.  Any pass-through attributes are also
            rendered on the "table" element.  </p>
            
            <p>Column Groups</p>
            
            <ul>
            
            <p>If the <code>UIData</code> component has a "colgroups" facet,
            render its contents.  Consistent with the rules of facets in
            general, this facet must have only one child.  In general, this
            will be a <code>panel group</code> component that will contain
            <code>colgroup</code> and <code>col</code> elements per the HTML
            Table specification.  Use of column grouping can improve
            accessibility.  This facet must be rendered before the table
            header and footer.</p>
            
            </ul>
            
            <p>Rendering the header</p>
            
            <ul>
            
            <p>If the <code>UIData</code> component has a "header" facet, or
            any of the child <code>UIColumn</code> components has a "header"
            facet, render a "thead" element.  If the <code>UIData</code>
            component has a "header" facet, encode its contents inside of "tr"
            and "th" elements, respectively.  Output the value of the
            "headerClass" attribute of the <code>UIData</code> component, if
            present, as the value of the "class" attribute on the "th".
            Output the number of child <code>UIColumn</code> components of the
            <code>UIData</code> component as the value of the "colspan"
            attribute on the "th".  Output "colgroup" as the value of the
            "scope" attribute on the "th" element. </p>
            
            <p>If any of the child <code>UIColumn</code> components has a
            "header" facet render a "tr" element.  For each
            <code>UIColumn</code> that actually has a "header" facet, render
            it inside of a "th" element.  Columns that don't have a "header"
            facet cause an empty "th" element to be rendered.  Output the
            value of the "headerClass" attribute of the <code>UIColumn</code>
            component, if present, as the value of the "class" attribute on
            the "th".  If the "headerClass" attribute of the <code>UIColumn</code>
            component is not present, output the value of the "headerClass"
            attribute of the <code>UIData</code> component, if present, as
            the value of the "class" attribute on the "th".  Output "col" as
            the value of the "scope" attribute on the "th" element.
            </p>
            
            <p>Close out the "thead" element.</p>
            
            </ul>
            
            <p>Rendering the footer</p>
            
            <ul>
            
            <p>Follow the same process as for the header, except replace
            "header" with "footer", "th" with "td", "thead" with "tfoot", and
            "headerClass" with "footerClass".  Do not render any "scope"
            attribute for the footer.</p>
            
            </ul>
            
            <p>Rendering the table body</p>
            
            <ul>
            
            <p>Look at the value of the "bodyrows" attribute.  If present,
            this must be a comma separated list of integers.  Each entry in
            this list is the row index of the row before which a "tbody"
            element should be rendered.</p>
            
            <p>If there was no "bodyrows" attribute, or it was empty, render a
            "tbody" element.  Keep track of the result of the "rows" property
            on the <code>UIData</code> component.  Keep track of the number of
            rows we have rendered so far.  Iterate through the rows.  Set the
            "rowIndex" property of the <code>UIData</code> component to be
            correct as we iterate through the rows.  Stop rendering children
            and close out the "tbody" element if the "rowAvailable" property
            of the <code>UIData</code> returned false.  If the current row
            index is contained in the "bodyrows" attribute, check if a "tbody"
            start element was rendered that needs to be closed, and if so,
            close the "tbody" element.  Then render a "tbody" element start.
            Otherwise, do not render a "tbody" element.</p>
            
            <p>Output a "tr" element.  Output the value of the "rowClasses"
            per the attribute description below.  For each
            <code>UIColumn</code> child, if the column component has a
            "rowHeader" attribute with a value of "true", output a "th"
            element with a "scope" attribute with the value of "row".
            Otherwise, if the column component has no "rowHeader" attribute,
            or its value is false, output a "td" element.  In either case
            attach the value of the "columnClasses" attribute of the
            <code>UIData</code> component per the attribute description below.
            Recursively encode each child of each <code>UIColumn</code> child.
            Close out the "td" or "th" element.  When done with the row, close
            out the "tr" element.  When done with all the rows, close out the
            "tbody" element.</p>
            
            </ul>
            
            <p>When done rendering all the rows, set the "rowIndex" property of
            the <code>UIData</code> to -1, and close out the "table"
            element.</p>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.DataTableTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="first">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Zero-relative row number of the first row to be displayed.  If this
                property is set to zero, rendering will begin with the first row of
                the underlying data.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rows">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The number of rows to display, starting with the one identified by the
                "first" property.  If this value is set to zero, all available rows in
                the underlying data model will be displayed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="var">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name of a request-scope attribute under which the model data for the
                row selected by the current value of the "rowIndex" property (i.e.
                also the current value of the "rowData" property) will be exposed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="bgcolor">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name or code of the background color for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="bodyrows">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Comma separated list of row indices for which a new
                "tbody" element should be started (and any
                previously opened one should be ended).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="border">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Width (in pixels) of the border to be drawn
                around this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="captionClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) that will be
                applied to any caption generated for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="captionStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this caption is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="cellpadding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Definition of how much space the user agent should
                leave between the border of each cell and its contents.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="cellspacing">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Definition of how much space the user agent should
                leave between the left side of the table and the
                leftmost column, the top of the table and the top of
                the top side of the topmost row, and so on for the
                right and bottom of the table.  It also specifies
                the amount of space to leave between cells.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="columnClasses">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Comma-delimited list of CSS style classes that will be applied
                to the columns of this table.  A space separated list of
                classes may also be specified for any individual column.  If
                the number of elements in this list is less than the number of
                actual column children of the UIData, no "class"
                attribute is output for each column greater than the number of
                elements in the list.  If the number of elements in the list
                is greater than the number of actual column children of the
                UIData, the elements at the posisiton in the list
                after the last column are ignored.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="footerClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) that will be
                applied to any footer generated for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="frame">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code specifying which sides of the frame surrounding
                this table will be visible.  Valid values are:
                none (no sides, default value); above (top side only);
                below (bottom side only); hsides (top and bottom sides
                only); vsides (right and left sides only); lhs (left
                hand side only); rhs (right hand side only); box
                (all four sides); and border (all four sides).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="headerClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) that will be
                applied to any header generated for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rowClasses">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Comma-delimited list of CSS style classes that will be applied
                to the rows of this table.  A space separated list of classes
                may also be specified for any individual row.  Thes styles are
                applied, in turn, to each row in the table.  For example, if
                the list has two elements, the first style class in the list
                is applied to the first row, the second to the second row, the
                first to the third row, the second to the fourth row, etc.  In
                other words, we keep iterating through the list until we reach
                the end, and then we start at the beginning again.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rules">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code specifying which rules will appear between cells
                within this table.  Valid values are:  none (no rules,
                default value); groups (between row groups); rows
                (between rows only); cols (between columns only); and
                all (between all rows and columns).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="summary">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Summary of this table's purpose and structure, for
                user agents rendering to non-visual media such as
                speech and Braille.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="width">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Width of the entire table, for visual user agents.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="form">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <span class="changed_modified_2_0">
            Renders</span> an HTML "form" element.
            
            <p>Decode Behavior</p>
            
            <ul>
            
            <p>Obtain the <code>Map</code> from the "requestParameterMap"
            property of the <code>ExternalContext</code>.  If the map contains
            an entry for the "clientId" of this <code>UIForm</code> component,
            call <code>setSubmitted(true)</code> on the form, otherwise call
            <code>setSubmitted(false)</code> on the form.</p>
            
            </ul>
            
            
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>The value of the "method" attribute must be "post".  The value
            of the "action" attribute must be the result of passing the view
            identifier of the current view to the <code>getActionURL()</code>
            method of the <code>ViewHandler</code> for this application, then
            passing that String to the <code>encodeActionURL()</code> method
            on the <code>ExternalContext</code>.  The value of the acceptcharset
            attribute must be rendered as the value of "accept-charset".
            If the "styleClass" attribute is specified, render its value as the
            value of the "class" attribute.  Render a "name"
            attribute with a value the same as the "id" attribute as described
            in "<a href="../../../renderkitdocs/HTML_BASIC/renderkit-summary.html#general_encoding">General Notes on
            Encoding</a>" regarding the "id" attribute for UIInput
            components.  Call <code>ViewHandler.writeState()</code>
            before the the close of the "form" element.  Render all the
            necessary hidden fields for all commandLink instances in the page
            just before the close of the "form" element.
            <div class="changed_modified_2_0">
            Just before rendering the closing <code>&lt;/form&gt;</code> element tag, render
            any resources that have been targeted for this form:
            <ul>
            <li>Obtain a <code>UIViewRoot</code> instance.</li>
            <li>Obtain a <code>List</code> of component resources targeted for
            this form with a call to <code>UIViewRoot.getComponentResources()</code>
            with the <code>String "form"</code> as the argument.</li>
            <li>Iterate over the returned <code>List</code> of <code>UIComponent</code> instances
            and call <code>encodeAll</code> on each <code>UIComponent</code> instance.
            </ul>
            </div>
            </p>
            </ul>
            </div>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.FormTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="prependId">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this form should prepend its id
                to its descendent's id during the clientId generation process.
                If this flag is not set, the default value is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accept">
        <xs:annotation>
          <xs:documentation><![CDATA[
                List of content types that a server processing this form
                will handle correctly
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="acceptcharset">
        <xs:annotation>
          <xs:documentation><![CDATA[
                List of character encodings for input data
                that are accepted by the server processing
                this form.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="enctype">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Content type used to submit the form to the server.  If not
                specified, the default value is
                "application/x-www-form-urlencoded".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onreset">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this form is reset.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onsubmit">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this form is submitted.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="target">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name of a frame where the response
                retrieved after this form submit is to
                be displayed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="graphicImage">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p><span
            class="changed_modified_2_0">Renders</span> an HTML "img"
            element.  Render the clientId as the value of the "id"
            attribute.</p>
            
            <div class="changed_modified_2_0">
            
            <p>Handling the Value</p>
            
            <ul>
            
            <p>If the "name" attribute is present, execute algorithm <a
            href="javax.faces.Outputjavax.faces.resource.Script.html#ResourceCommonGetResource">Common Algorithm for Obtaining A Resource to Render</a> to obtain a <code>Resource</code> instance.  Call
            <code>Resource.getRequestPath()</code> and output the result as the
            value of the "src" attribute on the rendered markup.</p>
            
            <p>Otherwise, if the "url" attribute is present, treat its value as
            if it was the value of the "value" attribute.  Otherwise, if the
            "value" attribute is present, render the value of the component as
            the value of the "src" attribute, after passing it to the
            <code>getResourceURL()</code> method of the <code>ViewHandler</code>
            for this application, and passing the result through the
            <code>encodeResourceURL()</code> method of the
            <code>ExternalContext</code>.</p>
            
            <p>When handling the "src" attribute,
            the value must not be escaped.  For example, <code>&</code> must not
            be turned into <code>&amp;amp;</code>.  If the "styleClass"
            attribute is specified, render its value as the value of the "class"
            attribute.</p>
            
            </ul>
            
            </div>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.GraphicImageTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="url">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Context-relative URL to retrieve the resource associated with
                this component.  This is an alias for the "value" property.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="alt">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Alternate textual description of the
                element rendered by this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="height">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Override for the height of this image.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ismap">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this image is to be used as a server side
                image map.  Such an image must be enclosed within a hyperlink
                ("a").  A value of false causes no attribute to be rendered,
                while a value of true causes the attribute to be rendered as
                ismap="ismap".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="library">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <div class="changed_added_2_0"><p>The <em>libraryName</em> for this resource.</p></div>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="longdesc">
        <xs:annotation>
          <xs:documentation><![CDATA[
                URI to a long description of the image
                represented by this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="name">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <div class="changed_added_2_0"><p>The <em>resourceName</em> for this resource.</p></div>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="target">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <div class="changed_added_2_0"><p>The <em>target</em> area for which this resource will be rendered.  For example, <em>target="head"</em> would cause the resource to be rendered within the <em>head</em> element.</p></div>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="usemap">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The name of a client side image map (an HTML "map"
                element) for which this element provides the image.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="width">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Override for the width of this image.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="inputHidden">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Renders an HTML "input" element of type
            "hidden".</p>
            
            <p>Decode Behavior</p>
            
            <ul>
            
            <p>See the decode description for the <a
            href="javax.faces.Inputjavax.faces.Text.html#encode">Input
            Text</a> renderer.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>Render the clientId of the component as the value of the
            "name" attribute.  Render the current value of the component as
            the value of the "value" attribute.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.InputHiddenTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="inputSecret">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Renders an HTML "input" element of "type" "password".</p>
            
            <p>Decode Behavior</p>
            
            <ul>
            
            <p>See the decode description for the <a
            href="javax.faces.Inputjavax.faces.Text.html#encode">Input
            Text</a> renderer.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>
            Render the clientId of the component as the value of the "name"
            attribute.  Render the current value of the component as the value
            of the "value" attribute, if and only if the "redisplay" component
            attribute is the string "true".  If the "styleClass" attribute is
            specified, render its value as the value of the "class"
            attribute.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.InputSecretTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="alt">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Alternate textual description of the
                element rendered by this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="autocomplete">
        <xs:annotation>
          <xs:documentation><![CDATA[
                If the value of this attribute is "off", render "off" as the value
                of the attribute. This indicates that the  browser should
                disable its autocomplete feature for this component.  This is
                useful for components that perform autocompletion and do not
                want the browser interfering.  If this attribute is not set or the value
                is "on", render nothing.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxlength">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The maximum number of characters that may
                be entered in this field.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="redisplay">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that any existing value
                in this field should be rendered when the
                form is created.  Because this is a potential
                security risk, password values are not
                displayed by default.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="size">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The number of characters used to determine
                the width of this field.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="inputText">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Renders an HTML "input"
            element of "type" "text".</p>
            
            <p><a name="decode">Decode Behavior</a></p>
            
            <ul>
            
            <p>Obtain the <code>Map</code> from the "requestParameterMap"
            property of the <code>ExternalContext</code>.  If the
            <code>Map</code> contains an entry for the "clientId" of the
            component, pass the value of the entry to the
            <code>setSubmittedValue()</code> method of the component, which
            must be an instance of <code>EditableValueHolder</code>.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>  Render the clientId of the component as
            the value of the "name" attribute.  Render the current value of
            the component as the value of the "value" attribute.  If the
            "styleClass" attribute is specified, render its value as the value
            of the "class" attribute.
            </p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.InputTextTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="alt">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Alternate textual description of the
                element rendered by this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="autocomplete">
        <xs:annotation>
          <xs:documentation><![CDATA[
                If the value of this attribute is "off", render "off" as the value
                of the attribute. This indicates that the  browser should
                disable its autocomplete feature for this component.  This is
                useful for components that perform autocompletion and do not
                want the browser interfering.  If this attribute is not set or the value
                is "on", render nothing.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxlength">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The maximum number of characters that may
                be entered in this field.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="size">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The number of characters used to determine
                the width of this field.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="inputTextarea">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Renders an HTML "textarea" element.</p>
            
            <p>Decode Behavior</p>
            
            <ul>
            
            <p>See the encode description for the <a
            href="javax.faces.Inputjavax.faces.Text.html#encode">Input
            Text</a> renderer.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>  Render the
            clientId as the value of the "name" attribute.  Render the current
            valu eof the component inside the "textarea"
            element.</p> </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.InputTextareaTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="cols">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The number of columns to be displayed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rows">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The number of rows to be displayed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="message">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Render a single message for a specific component.</p>
            
            <p>Set-up for Rendering</p>
            
            <ul>
            
            <p>Obtain the "summary" and "detail" properties from
            <code>UIMessage</code> component.  If not present, keep the
            empty string as the value, respectively.  Obtain the first
            <code>FacesMessage</code> to render from the component, using
            the "for" property of the <code>UIMessage</code>.  This will be
            the only message we render.  Obtain the severity style for this
            message.  If the severity of the message is
            <code>FacesMessage.SEVERITY_INFO</code>, the severity style
            comes from the value of the "infoStyle" attribute.  If the
            severity of the message is
            <code>FacesMessage.SEVERITY_WARN</code>, the severity style
            comes from the value of the "warnStyle" attribute, and so on for
            each of the severities, <code>INFO, WARN, ERROR</code> and
            <code>FATAL</code>.  The same rules apply for obtaining the
            severity style class, but instead of "infoStyle, warnStyle", etc
            use "infoClass, warnClass", etc.  Obtain the "style",
            "styleClass" and "layout" attributes from the
            <code>UIMessage</code> component.  If we have a "style"
            attribute and a severity style attribute, use the severity style
            attribute as the value of the "style" attribute.  If we have no
            "style" attribute, but do have a severity style, use the
            severity style as the value of the "style" attribute.  The same
            precedence rules apply for the style class.  Obtain the value of
            the <code>dir</code> and <code>lang</code> attributes.</p>
            
            </ul>
            
            <p>Rendering</p>
            
            <ul>
            
            <p>For the message renderer, we only render one row, for the first
            message.  For the messages renderer, we render as many rows as we
            have messages.  If any of the "dir", "lang", "style" or
            "styleClass" attributes has a non-null value (as determined
            above), render a "span" element, outputting the value of the
            "style" attribute as the the value of the "style" attribute, and
            outputting the value of the "styleClass" attribute as the value of
            the "class" attribute on the "span" element.  Output the "dir" and
            "lang" attributes as well, if they are present.  If the
            <code>UIMessage</code> has a "tooltip" attribute with the value of
            "true", and the <code>UIMessage</code> has "showSummary" and
            "showDetail" properties with the value "true", if we haven't
            already written out the "span", output the "summary" as the value
            of the "title" attribute on the "span".  If we haven't already
            written out a "title" attribute, and "showSummary" is true, output
            the summary.  If "showDetail" is true, output the detail.  Close
            out the span if necessary.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.MessageTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="for" use="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Client identifier of the component for which to display messages.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="showDetail">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether the detail portion of displayed messages
                should be included.  Default value is "true".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="showSummary">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether the summary portion of displayed messages
                should be included.  Default value is "false".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="errorClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to any message
                with a severity class of "ERROR".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="errorStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to apply to any message
                with a severity class of "ERROR".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fatalClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to any message
                with a severity class of "FATAL".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fatalStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to apply to any message
                with a severity class of "FATAL".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="infoClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to any message
                with a severity class of "INFO".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="infoStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to apply to any message
                with a severity class of "INFO".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tooltip">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether the detail portion of the
                message should be displayed as a tooltip.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="warnClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to any message
                with a severity class of "WARN".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="warnStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to apply to any message
                with a severity class of "WARN".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="messages">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>The same as for the Message renderer, but output all the
            messages.  If the value of the "layout" attribute is "table",
            render nested "table", "tr", and "td" elements, in that order.
            If the value of the "layout" attribute is "list", or the "layout"
            attribute is not specified, render nested "ul", "li" elements,
            in that order.  Output the value of the "style" attribute as the
            value of the "style" attribute, output the value of the "styleClass"
            attribute as the value of the "class" attribute, and output the dir
            and lang attributes.  Output these values on the "table" element or
            the "ul" element.   Output the values of the "errorStyle", "fatalStyle",
            "infoStyle", "warnStyle" attributes as the value of the "style" attribute
            on either the "tr" element or the "li" element.  Output the values of
            the "errorClass", "fatalClass", "infoClass", "warnClass" attributes as the
            value of the "class" attribute on either the "tr" element or the "li"
            element.  The component is a <code>UIMessages</code>, and
            there is no "for" attribute.  Therefore, use either <code>null</code>
            to obtain the messages from the <code>FacesContext</code> or the
            empty string if the components "globalOnly" property is <code>true</code>.
            If the layout was "table" close out the table elements, otherwise,
            close out the list elements.</p>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.MessagesTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="globalOnly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that only global messages (that is, messages not
                associated with any client identifier) are to be displayed.
                Default value is "false".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="showDetail">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether the detail portion of displayed messages
                should be included.  Default value is "false".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="showSummary">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether the summary portion of displayed messages
                should be included.  Default value is "true".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="errorClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to any message
                with a severity class of "ERROR".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="errorStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to apply to any message
                with a severity class of "ERROR".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fatalClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to any message
                with a severity class of "FATAL".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="fatalStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to apply to any message
                with a severity class of "FATAL".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="infoClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to any message
                with a severity class of "INFO".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="infoStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to apply to any message
                with a severity class of "INFO".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="layout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The type of layout markup to use when rendering
                error messages.  Valid values are "table" (an HTML
                table) and "list" (an HTML list).  If not specified,
                the default value is "list".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tooltip">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether the detail portion of the
                message should be displayed as a tooltip.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="warnClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to any message
                with a severity class of "WARN".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="warnStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to apply to any message
                with a severity class of "WARN".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="outputFormat">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Render parameterized text.  Obtain the
            <code>style</code>, <code>styleClass</code>, <code>dir</code>, and
            <code>lang</code> attributees from this component.  If any are
            present, render a "span" element.  Output the
            <code>styleClass</code> attribute (if present) as the value of the
            <code>class</code> attribute.  Output the <code>style</code>
            attribute as the value of the <code>style</code> attribute.
            Output the <code>dir</code> and <code>lang</code> attributes as
            pass through attributes.  Accrue a list of the values of all child
            <code>UIParameter</code> components of this component.  If there
            are one or more accumulated parameter values, convert the list of
            parameter values to an <code>Object</code> array, call
            <code>MessageFormat.format()</code>, passing the
            <code>value</code> of this component as the first argument, and
            the array of parameter values as the second argument, and render
            the result.  Otherwise, render the <code>value</code> of this
            component unmodified.</p>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.OutputFormatTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="escape">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that characters that are sensitive
                in HTML and XML markup must be escaped.  This flag
                is set to "true" by default.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="outputLabel">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Renders an HTML "label" element.  Render the current value
            of the component as label text if it is specified. If a "for" attribute is
            specified, find the component specified by the value of the "for"
            attribute, and render its client id as the value of the "for" attribute.
            If "styleClass" attribute is specified, render its value as the value
            of the "class" attribute.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.OutputLabelTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="escape">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that characters that are sensitive
                in HTML and XML markup must be escaped.  If omitted, this
                flag is assumed to be "true".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="for">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Client identifier of the component for which this element
                is a label.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="outputLink">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Render an HTML "a" anchor element.  The value of the
            component is rendered as the value of the "href" attribute.  Any
            child UIParameter components are appended to the String to be
            output as the value of the "href" attribute as query parameters
            before rendering.  The entire "href" string must be passed through
            a call to the <code>encodeResourceURL()</code> method of the
            <code>ExternalContext</code>.  The name of the UIParameter goes on
            the left hand side, and the value of the UIParameter on the right
            hand side.  The name and the value must be URLEncoded.  Each
            UIParameter instance is separeted by an ampersand, as dictated in
            the URL spec.  If the "styleClass" attribute is specified, render
            its value as the value of the "class" attribute.  If the "id" attribute
            is specified, follow the same steps as mentioned in the
            "<a href="../../../renderkitdocs/HTML_BASIC/renderkit-summary.html#general_encoding">General
            Notes on Encoding</a>" regarding the "id" attribute for UIInput components.
            If the "disabled" attribute is specified, do not render the HTML "a"
            anchor element or the "href" element.  Instead, render a "span" element.
            If the "styleClass" attribute is specified, render its value as the value
            of the "class" attribute on the "span".  Render any pass-through attributes
            on the "span".
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.OutputLinkTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="charset">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The character encoding of the resource designated
                by this hyperlink.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="coords">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The position and shape of the hot spot on the screen
                (for use in client-side image maps).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never
                receive focus or be included in a subsequent
                submit.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hreflang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The language code of the resource designated
                by this hyperlink.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rel">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The relationship from the current document
                to the anchor specified by this hyperlink.
                The value of this attribute is a space-separated
                list of link types.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rev">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A reverse link from the anchor specified
                by this hyperlink to the current document.
                The value of this attribute is a space-separated
                list of link types.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="shape">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The shape of the hot spot on the screen
                (for use in client-side image maps).  Valid
                values are:  default (entire region); rect
                (rectangular region); circle (circular region);
                and poly (polygonal region).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="target">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name of a frame where the resource
                retrieved via this hyperlink is to
                be displayed.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The content type of the resource designated
                by this hyperlink.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="outputText">
    <xs:annotation>
      <xs:documentation><![CDATA[
            If the "styleClass", "style", "dir" or "lang"
            attributes are present, render a "span" element.  If the
            "styleClass" attribute is present, render its value as the value
            of the "class" attribute.  If the "style" attribute is present,
            pass it thru.  If the "escape" attribute is not present, or it is
            present and its value is "true" all angle brackets should be
            converted to the ampersand xx semicolon syntax when rendering the
            value of the "value" attribute as the value of the component.  If
            the "escape" attribute is present and is "false" the value of the
            component should be rendered as text without escaping.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.OutputTextTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="escape">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that characters that are sensitive
                in HTML and XML markup must be escaped.  This flag
                is set to "true" by default.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="panelGrid">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Renders an HTML "table" element, conforming to the
            rules in the HTML 401 specification.  Render the "caption" facet,
            if present, inside a "caption" element immediately below the "table" element.
            If the "captionClass" attribute is specified, render its value as the value
            of the "class" attribute on the "caption" element.  If the "captionStyle" attribute
            is specified, render its value as the value of the "style" attribute
            on the "caption" element.  If the "styleClass" attribute is specified, render
            its value as the value of the "class" attribute.  Render the pass-through
            attributes in the table below.  Render the "header" facet, if present, inside of
            "thead", "tr", and "th" elements, nested in that order.  If the
            "headerClass" attribute is specifed, render its value as the value
            of the "class" attribute on the "th" element.  Render "colgroup"
            as the value of the "scope" attribute.  Render the value of the
            "columns" attribute as the value of the "colspan" attribute on the
            "th" element.  Render the "footer" facet if present, using similar
            logic to the rendering of the "header", but replacing "thead" with
            "tfoot", "th" with "td", and "headerClass" with "footerClass".
            Render the children of the <code>UIPanel</code> component inside
            of a "tbody" element.  Render the children based on the value of
            the "columns" attribute, creating a new row each time a "columns"
            worth of children have been rendered.  For the start of each row,
            render a "tr" element.  Output the value of the "rowClasses" per
            the attribute description below.  For each child, output a "td"
            element, attaching the value of the "columnClasses" attribute per
            the attribute description below.  Recursively encode each child.
            Close out the "td" element.  When done with the row, close out the
            "tr" element.  If a child has "rendered==false" it is not rendered,
            and the column counter must not be incremented.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.PanelGridTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="bgcolor">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Name or code of the background color for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="bodyrows">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Comma separated list of row indices for which a new
                "tbody" element should be started (and any
                previously opened one should be ended).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="border">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Width (in pixels) of the border to be drawn
                around this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="captionClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) that will be
                applied to any caption generated for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="captionStyle">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this caption is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="cellpadding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Definition of how much space the user agent should
                leave between the border of each cell and its contents.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="cellspacing">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Definition of how much space the user agent should
                leave between the left side of the table and the
                leftmost column, the top of the table and the top of
                the top side of the topmost row, and so on for the
                right and bottom of the table.  It also specifies
                the amount of space to leave between cells.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="columnClasses">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Comma-delimited list of CSS style classes that will be applied
                to the columns of this table.  A space separated list of
                classes may also be specified for any individual column.  If
                the number of elements in this list is less than the number of
                actual column children of the UIData, no "class"
                attribute is output for each column greater than the number of
                elements in the list.  If the number of elements in the list
                is greater than the number of actual column children of the
                UIData, the elements at the posisiton in the list
                after the last column are ignored.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="columns">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The number of columns to render before
                starting a new row.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="footerClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) that will be
                applied to any footer generated for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="frame">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code specifying which sides of the frame surrounding
                this table will be visible.  Valid values are:
                none (no sides, default value); above (top side only);
                below (bottom side only); hsides (top and bottom sides
                only); vsides (right and left sides only); lhs (left
                hand side only); rhs (right hand side only); box
                (all four sides); and border (all four sides).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="headerClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) that will be
                applied to any header generated for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rowClasses">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Comma-delimited list of CSS style classes that will be applied
                to the rows of this table.  A space separated list of classes
                may also be specified for any individual row.  Thes styles are
                applied, in turn, to each row in the table.  For example, if
                the list has two elements, the first style class in the list
                is applied to the first row, the second to the second row, the
                first to the third row, the second to the fourth row, etc.  In
                other words, we keep iterating through the list until we reach
                the end, and then we start at the beginning again.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rules">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code specifying which rules will appear between cells
                within this table.  Valid values are:  none (no rules,
                default value); groups (between row groups); rows
                (between rows only); cols (between columns only); and
                all (between all rows and columns).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="summary">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Summary of this table's purpose and structure, for
                user agents rendering to non-visual media such as
                speech and Braille.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="width">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Width of the entire table, for visual user agents.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="panelGroup">
    <xs:annotation>
      <xs:documentation><![CDATA[
            Intended for use in situations when only one
            UIComponent child can be nested, such as in the case of facets.
            If the "style" or "styleClass" attributes are present, and the "layout"
            attribute is present with a value of "block", render a "div" element,
            outputting the value of the "style" attribute as the value of the
            "style" attribute and the value of the "styleClass" attribute as the
            value of the "class" attribute.  Otherwise, if the "layout" attribute
            is not present, or the "layout" attribute contains a value other than
            "block", render a "span" element, outputting the value of the
            "style" attribute as the value of the "style" attribute, and the value
            of the "styleClass" attribute as the value of the "class"
            attribute.
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.PanelGroupTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="layout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The type of layout markup to use when rendering this group.
                If the value is "block" the renderer must produce an HTML
                "div" element.  Otherwise HTML "span" element must
                be produced.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" property on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectBooleanCheckbox">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Renders an HTML "input" element of type "checkbox".</p>
            
            <p>Decode Behavior</p>
            
            <ul>
            
            <p>Obtain the <code>Map</code> from the "requestParameterMap"
            property of the <code>ExternalContext</code>.  If there is no
            entry in the <code>Map</code> for the "clientId" of this
            component, pass "false" to the <code>setSubmittedValue()</code>
            method of the component, which must be an instance of
            <code>EditableValueHolder</code>.  If there is an entry, and its
            value is equal, ignoring case and without quotes, to any of the
            Strings: "on", "yes" or "true" pass true to the
            <code>setSubmittedValue()</code> method of the component.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>
            Render the clientId of the component as the value of the "name"
            attribute.  If the current value of the component is "true",
            output the "checked" attribute (must be rendered as checked="checked").
            If the "styleClass" attribute is specified, render its value as the value
            of the "class" attribute.</p> </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.SelectBooleanCheckboxTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectManyCheckbox">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p><span
            class="changed_modified_2_0">Render</span> an HTML checkbox
            list.</p>
            
            <p><a name="decode">Decode Behavior</a></p>
            
            <ul>
            
            <p>See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeMany">"Decode
            Behavior for UISelectMany Components"</a> section.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            <p>Render a "table" element.  If the "styleClass" is specified,
            render the value of the "styleClass" attribute as the value of the
            "class" attribute on the "table" element. If the "style", or
            "border" attributes are specified, pass them thru <span
            class="changed_added_2_0">and render their values as the "style"
            and "border" attributes on the "table", respectively.</span> If
            the "layout" attribute is specified, and its value is
            "pageDirection", render the children elements vertically,
            otherwise horizontally, in the table.  If any of the children are
            an instance of SelectItemGroup, render them as a nested table.
            Each of the children are ultimately rendererd as follows.  Render
            an "input" element of "type" "checkbox" for each child component.
            Render the "name" attribute on the "input" element with the value
            of the <code>clientId</code> of the component.  Render an "id"
            attribute on the "input" element.  Each "id" value must be unique.
            If the current SelectItem.isDisabled() returns true, render
            "disabled" as the value of the "disabled" attribute.  Close out
            the "input" element.  Render a "label" element.  Render the "for"
            attribute of the "label" element whose value is the corresponding
            "input" element's "id" value.  Render any "style" as the "class"
            attribute on the "label" element.  <span
            class="changed_added_2_0">If the current checkbox would be
            rendered as being checked, and there is a "selectedClass"
            attribute, append a space, followed by the value of the
            "selectedClass" attribute to any existing "class" attribute value
            on the label element.  Otherwise, render the value of the
            "selectedClass" attribute as the value of the "class" attribute on
            the label element.  If the current checkbox would be rendered as
            being not checked, and there is a "unselectedClass" attribute,
            append a space, followed by the value of the "unselectedClass"
            attribute to any existing "class" attribute value on the label
            element.  Otherwise, render the value of the "unselectedClass"
            attribute as the value of the "class" attribute on the label
            element.</span>  Close out the starting "label" element and render
            the label value from SelectItem.getLabel().  Close out the "label"
            element.  As an exception to the general rules about how to handle
            the "id" attribute, render it as an attribute on the outer "table"
            element, the value of which is the <code>clientId</code> of the
            component per the rules at the beginning of this specification.
            The value of the current SelectItem is rendered as the value of
            the "value" attribute.  Coerce the value of the currently rendered
            child to the type of the parent UISelectMany value following the
            Expression Language coercion rules, before comparing the values.
            If the value of the enclosing UISelectMany matches the current
            value, render "checked" as the value of the "checked" attribute.
            See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering
            the option elements" </a> specification for
            <code>ListboxRenderer</code> for more detail on how to render the
            "option" elements in this renderer.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.SelectManyCheckboxTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="border">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Width (in pixels) of the border to be drawn
                around the table containing the options list.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="collectionType">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p class="changed_modified_2_0"> Optional
                attribute that is a literal string that is the fully qualified
                class name of a concrete class that implements
                <code>java.util.Collection</code>, or an EL expression that
                evaluates to either 1. such a String, or 2. the
                <code>Class</code> object itself. </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on disabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="enabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on enabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hideNoSelectionOption">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that, if this component is activated by the user,
                The "no selection option", if any, must be hidden.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="layout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Orientation of the options list to be created.
                Valid values are "pageDirection" (list is laid
                out vertically), or "lineDirection" (list is
                laid out horizontally).  If not specified, the
                default value is "lineDirection".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="selectedClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on selected options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="unselectedClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on unselected options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectManyListbox">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p><span
            class="changed_modified_2_0">Render</span> an HTML option
            list.</p>
            
            <p>Decode Behavior</p>
            
            <p>This section documents the decode behavior for all renderers
            that handle <code>UISelectMany</code> or <code>UISelectOne</code>
            components.</p>
            
            <ul>
            
            <p><a name="decodeMany">Decode Behavior for
            <code>UISelectMany</code> components</a></p>
            
            <ul>
            
            <p>Obtain the <code>Map</code> from the
            "requestParameterValuesMap" property of the
            <code>ExternalContext</code>.  If the <code>Map</code> contains
            an entry for the "clientId" of the component, pass the value of
            the entry, cast to a <code>String []</code>, to the
            <code>setSubmittedValue()</code> method of the component, which
            must be an <code>EditableValueHolder</code>.  If the
            <code>Map</code> does not contain an entry, create an empty
            <code>String</code> array and call
            <code>setSubmittedValue()</code> with it.</p>
            
            <p class="changed_modified_2_0">Please check the javadoc for <a
            href="../../javadocs/javax/faces/component/UISelectMany.html#getConvertedvalue">UISelectMany.getConvertedValue()</a>
            for additional requirements for renderers that render this kind
            of component.</p>
            
            </ul>
            
            <p><a name="decodeOne">Decode Behavior for
            <code>UISelectOne</code> components</a></p>
            
            <ul>
            
            <p>Obtain the <code>Map</code> from the "requestParameterMap"
            property of the <code>ExternalContext</code>.  If there is a
            <code>Map</code> entry for the "clientId" property of the
            component, pass it to the <code>setSubmittedValue()</code> method
            of the component. <span class="changed_added_2_0">If the
            <code>Map</code> does not contain an entry, call
            <code>setSubmittedValue()</code> passing an empty
            <code>String</code> as the argument.</span> </p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>Render an HTML "select" element. Render the clientId of
            the component as the value of the "name" attribute.  If the "styleClass"
            attribute is specified, render its value as the value of the "class"
            attribute on the "select" element.  If the component is a
            <code>UISelectMany</code> instance, render "multiple" as the value of the
            "multiple" attribute.  If the "size" attribute is specified, render its
            value as the value of the "size" attribute.  Otherwise use the number of
            items as the value of the "size" attribute.</p>
            
            </ul>
            
            <p><a name="option">Rendering the "option" elements</a></p>
            
            <ul>
            
            <p>The only valid children of this component are
            <code>UISelectItem</code> or <code>UISelectItems</code>
            instances. Iterate over the children of this component, and accrue
            a list of <code>javax.faces.model.SelectItem</code> instances.
            <span class="changed_added_2_0">If the current child is a
            <code>SelectItem</code> whose <code>noSelctionProperty</code> is
            <code>true</code>, <b>and</b> the <code>UISelectOne</code> or
            <code>UISelectMany</code> parent of this option has one or more
            selected values that <b>are not</b> the "no selection"
            <code>SelectItem</code>, <b>and</b> the component has a
            "hideNoSelectionLabel" attribute whose value is <code>true</code>,
            then the current option, which is the "no selection" option, must
            not be rendered.</span> If the current child is a
            <code>UISelectItem</code> create a <code>SelectItem</code>instance
            from its <code>itemValue, itemLabel</code> and
            <code>itemDescription</code> properties, add it to the list.  If
            the current child is a <code>UISelectItems</code> instance, call
            its <code>getValue()</code> method.  If the result is a
            <code>SelectItem</code> bean, add it to the list.  If the result
            is an array of <code>SelectItem</code> beans, add each one to the
            list.  If the result is a <code>Collection</code> of
            <code>SelectItem</code> beans, add each one to the list.  If the
            result is a <code>Map</code>, create a <code>SelectItem</code>
            bean for each entry in the <code>Map</code> using the key as the
            label, the value as the value, and <code>null</code> as the
            description.  Iterate over the list of <code>SelectItem</code>
            beans.  If the current element is a <code>SelectItemGroup</code>,
            render an "optgroup" element with a "label" attribute, the value
            of which is the "label" property from the current element, then
            call <code>getSelectItems()</code> and render each element as
            below.  If the current element is not a
            <code>SelectItemGroup</code>, render an "option" element.  Follow
            the conversion rules in the spec to obtain a renderable
            <code>String</code> from the "value" property of the current
            element, render that as the value of the "value" atribute.  Now it
            is time to see if the current element is the selected value.  Call
            its <code>getSubmittedValue()</code> method, casting the result to
            an <code>Object []</code>, otherwise the component must be a
            <code>UISelectOne</code> instance, call its
            <code>getSubmittedValue()</code> method and create an <code>Object
            []</code> around the result.  Determine the type of the resultant
            array if the resultant array is non-null, otherwise the type is
            <code>String</code>.  Coerce the current item value to this type
            following the Expression Language coercion rules.  If the
            resultant array is non-null, we look in the array for a value
            that, when we pass the renderable value to its
            <code>equals()</code> method, it returns <code>true</code>,
            meaning the current element is selected.  If the resultant array
            is <code>null</code>, if the component is a
            <code>UISelectMany</code>, call its <code>getValue()</code>
            method.  If the result is a <code>List</code> obtain the values in
            the list as an array.  Otherwise, the component must be a
            <code>UISelectOne</code> instance.  Call its
            <code>getValue()</code> method, which must be an Object array.
            Look for an element in the resultant array that, 1. when we pass
            the renderable value to its <code>equals()</code> method, it
            returns <code>true</code> , or 2. if the renderable value is null,
            and there is a null element in the array, also conclude that the
            current element is selected.  Otherwise the current element is not
            selected.  Now, if the current value is selected, write out an
            HTML boolean property "selected".  If the current
            SelectItem.isDisabled() returns true, render "disabled" as the
            value of the "disabled" attribute.</p>
            
            </ul>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.SelectManyListboxTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="collectionType">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p class="changed_modified_2_0"> Optional
                attribute that is a literal string that is the fully qualified
                class name of a concrete class that implements
                <code>java.util.Collection</code>, or an EL expression that
                evaluates to either 1. such a String, or 2. the
                <code>Class</code> object itself. </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on disabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="enabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on enabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hideNoSelectionOption">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that, if this component is activated by the user,
                The "no selection option", if any, must be hidden.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="size">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Number of available options to be shown at all times.
                If not specified, all available options are shown.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectManyMenu">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p><span
            class="changed_modified_2_0">Render</span> an HTML option
            list.</p>
            
            <p><a name="decode">Decode Behavior</a></p>
            
            <ul>
            
            <p>See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeMany">"Decode
            Behavior for UISelectMany Components"</a> section.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>Render an HTML "select" element.  Render the clientId of
            the component as the value of the "name" attribute.  If the "styleClass"
            attribute is specified, render its value as the value of the "class"
            attribute on the "select" element. If the component
            to be rendered is a UISelectMany, render "multiple" as the value of
            the "multiple" attribute.  Render "1" as the value of the "size"
            attribute.  See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering the option
            elements" </a> specification for <code>ListboxRenderer</code> for
            more detail on how to render the "option" elements in this
            renderer.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.SelectManyMenuTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="collectionType">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p class="changed_modified_2_0"> Optional
                attribute that is a literal string that is the fully qualified
                class name of a concrete class that implements
                <code>java.util.Collection</code>, or an EL expression that
                evaluates to either 1. such a String, or 2. the
                <code>Class</code> object itself. </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on disabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="enabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on enabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hideNoSelectionOption">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that, if this component is activated by the user,
                The "no selection option", if any, must be hidden.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectOneListbox">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Render an HTML option list.</p>
            
            <p><a name="decode">Decode Behavior</a></p>
            
            <ul>
            
            <p>See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeOne">"Decode
            Behavior for UISelectOne Components"</a> section.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            <p>Render an HTML "select" element.  Render the clientId of
            the component as the value of the "name" attribute.  If the "styleClass"
            attribute is specified, render its value as the value of the "class"
            attribute on the "select" element. If the component
            to be rendered is a UISelectMany, render "multiple" as the value of
            the "multiple" attribute.  If the "size" attribute is specified,
            render its value as the value of the "size" attribute.  Otherwise
            use the number of items as the value of the "size" attribute.  See
            the <a href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering the option
            elements" </a> specification for <code>ListboxRenderer</code> for
            more detail on how to render the "option" elements in this
            renderer.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.SelectOneListboxTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on disabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="enabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on enabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hideNoSelectionOption">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that, if this component is activated by the user,
                The "no selection option", if any, must be hidden.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="size">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Number of available options to be shown at all times.
                If not specified, all available options are shown.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectOneMenu">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Render an HTML option list.</p>
            
            <p><a name="decode">Decode Behavior</a></p>
            
            <ul>
            
            <p>See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeOne">"Decode
            Behavior for UISelectOne Components"</a> section.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>Render an HTML "select" element.  Render the clientId of the
            component as the value of the "name" attribute.  If the
            "styleClass" attribute is specified, render its value as the value
            of the "class" attribute on the "select" element. If the component
            to be rendered is a UISelectMany, render "true" as the value of
            the "multiple" attribute.  Use the number of items as the value of
            the "size" attribute.  See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering
            the option elements" </a> specification for
            <code>ListboxRenderer</code> for more detail on how to render the
            "option" elements in this renderer.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.SelectOneMenuTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on disabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="enabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on enabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hideNoSelectionOption">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that, if this component is activated by the user,
                The "no selection option", if any, must be hidden.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="selectOneRadio">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p><span
            class="changed_modified_2_0">Render</span> a set of html
            "input" elements of type "radio".</p>
            
            <p><a name="decode">Decode Behavior</a></p>
            
            <ul>
            
            <p>See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#decodeOne">"Decode
            Behavior for UISelectOne Components"</a> section.</p>
            
            </ul>
            
            <p>Encode Behavior</p>
            
            <ul>
            
            <p>Render a "table" element. If the "styleClass" is specified,
            render the value of the "styleClass" attribute as the value of the
            "class" attribute on the "table" element. If the "style", "border"
            attributes are specified, pass them thru <span
            class="changed_added_2_0">and render their values as the "style"
            and "border" attributes on the "table", respectively.</span>. If
            the "layout" attribute is specified, and its value is
            "pageDirection", render the children elements vertically,
            otherwise horizontally, in the table.  If any of the children are
            an instance of SelectItemGroup, render them as a nested table.
            Each of the children are ultimately rendered as follows.  Render
            an "input" element of "type" "radio" for each child component.
            Render the "name" attribute on the "input" element with the value
            of the <code>clientId</code> of the component.  Render an "id"
            attribute on the "input" element.  Each "id" value must be unique.
            If the current SelectItem.isDisabled() returns true, render
            "disabled" as the value of the "disabled" attribute.  Close out
            the "input" element.  Render a "label" element.  Render the "for"
            attribute of the "label" element whose value is the corresponding
            "input" element's "id" value.  Render any "style" as the "class"
            attribute on the "label" element.  Close out the starting "label"
            element and render the label value from SelectItem.getLabel().
            Close out the "label" element.  As an exception to the general
            rules about how to handle the "id" attribute, render it as an
            attribute on the outer "table" element, the value of which is the
            <code>clientId</code> of the component per the rules at the
            beginning of this specification.  Coerce the value of the
            currently rendered child to the type of the parent UISelectOne
            value using the Expression Language coercion rules before
            comparing the values.  If the value of the currently rendered
            child is equal to the value of the parent UISelectOne, render an
            appropriate HTML boolean value indicating "checked" for the
            enclosing "input".  See the <a
            href="javax.faces.SelectManyjavax.faces.Listbox.html#options">"Rendering
            the option elements" </a> specification for
            <code>ListboxRenderer</code> for more detail on how to render the
            "option" elements in this renderer.</p>
            
            </ul>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.SelectOneRadioTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="converter">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="converterMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="immediate">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="requiredMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validator">
        <xs:annotation>
          <xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="validatorMessage">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The current value of this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="valueChangeListener">
        <xs:annotation>
          <xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component.  The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code> parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void.  In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                
                </p>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="accesskey">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Access key that, when pressed, transfers focus
                to this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="border">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Width (in pixels) of the border to be drawn
                around the table containing the options list.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dir">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on disabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="enabledClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style class to apply to the rendered label
                on enabled options.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="hideNoSelectionOption">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that, if this component is activated by the user,
                The "no selection option", if any, must be hidden.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="label">
        <xs:annotation>
          <xs:documentation><![CDATA[
                A localized user presentable name for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lang">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Code describing the language used in the generated markup
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="layout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Orientation of the options list to be created.
                Valid values are "pageDirection" (list is laid
                out vertically), or "lineDirection" (list is
                laid out horizontally).  If not specified, the
                default value is "lineDirection".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onblur">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onchange">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ondblclick">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                double clicked over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onfocus">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when this element receives focus.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeydown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeypress">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                pressed and released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onkeyup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a key is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousedown">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                pressed down over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmousemove">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved within this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseout">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved away from this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseover">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                moved onto this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onmouseup">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when a pointer button is
                released over this element.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onselect">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Javascript code executed when text within this
                element is selected by the user.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="style">
        <xs:annotation>
          <xs:documentation><![CDATA[
                CSS style(s) to be applied when this component is rendered.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="styleClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered.  This value must be passed through
                as the "class" attribute on generated markup.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tabindex">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="title">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Advisory title information about markup elements generated
                for this component.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a backing bean
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="column">
    <xs:annotation>
      <xs:documentation><![CDATA[
            <p>Renders a UIComponent that represents a single column of data within a parent <code>UIData</code> component.</p>
        ]]></xs:documentation>
      <xs:documentation>tag-class: com.sun.faces.taglib.html_basic.ColumnTag</xs:documentation>
      <xs:documentation>body-content: JSP</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:any processContents="lax"/>
      </xs:choice>
      <xs:attribute name="rendered">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="binding">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The value binding expression linking this component to a property in a backing bean 
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id">
        <xs:annotation>
          <xs:documentation><![CDATA[
                The component identifier for the associated component
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="footerClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) that will be
                applied to any column footer generated for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="headerClass">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Space-separated list of CSS style class(es) that will be
                applied to any column header generated for this table.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rowHeader">
        <xs:annotation>
          <xs:documentation><![CDATA[
                Flag indicating that this column is a row header column and therefore cells in this column should be rendered with "th" instead of "td" and must have the 'scope="row"' attribute.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
