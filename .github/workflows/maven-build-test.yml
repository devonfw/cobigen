name: CI/CD

on:
  workflow_dispatch:
  push:
    # https://github.community/t/action-does-not-run-on-master-with-tags-ignore-v/128354/4
    branches:
      - '**'
    paths-ignore:
      - 'documentation/**'
      - 'solicitor/**'
      - '**.asciidoc'
    tags-ignore:
      - '**'
  pull_request:
    paths-ignore:
      - 'documentation/**'
      - 'solicitor/**'
      - '**.asciidoc'

env:
  # if continuously builds exiting ramdomy, possibly add again -Djansi.force=true -Djansi.passthrough=true
  MVN_BATCH_MODE: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
  # fixing random connection reset of maven downloads as proposed here: https://github.com/actions/virtual-environments/issues/2715#issuecomment-797388909
  MVN_HTTP_OPTIMIZATION: '-Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120'
  MVN_TEST_COVERAGE: '-Dskip.code.coverage=false'

jobs:
  cache-dependencies:
    runs-on: ubuntu-latest
    steps:      
      - name: Clone Repository
        uses: actions/checkout@v3

      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: cobigen-dep-${{ hashFiles('**/pom.xml') }}
          clone: false
      
      - name: Resolve non-cobigen dependencies
        run: mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.2:resolve org.apache.maven.plugins:maven-dependency-plugin:3.1.2:resolve-plugins -DexcludeGroupIds=com.devonfw.cobigen -T1C -Pp2-build ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} || true # never fail
    
  build-and-test-core:
    needs: cache-dependencies
    strategy:
      fail-fast: false
      matrix:
        javaVersion: [11]
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }} # new key will cache
          maven-cache-restore-key: cobigen-dep-${{ hashFiles('**/pom.xml') }}
          java-version: ${{ matrix.javaVersion }}
          jacoco-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-jacoco-${{ github.sha }}-core-test # new key will cache

      - name: Build & Test Core
        shell: bash
        run: mvn install -f cobigen --projects !cobigen-core-systemtest ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} ${{ env.MVN_TEST_COVERAGE }}

  build-and-test-plugins:
    needs: build-and-test-core
    strategy:
      fail-fast: false
      matrix:
        javaVersion: [11]
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-plugins # new key will cache
          maven-cache-restore-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}
          java-version: ${{ matrix.javaVersion }}
          jacoco-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-jacoco-${{ github.sha }}-plugins # new key will cache
          jacoco-cache-restore-key: ${{ runner.os }}-${{ matrix.javaVersion }}-jacoco-${{ github.sha }}-core-test # hit - restore

      - name: Build & Test Plugins
        shell: bash
        run: mvn install -f cobigen-plugins ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} ${{ env.MVN_TEST_COVERAGE }}

  build-plugins-p2:
    needs: build-and-test-plugins
    strategy:
      fail-fast: false
      matrix:
        javaVersion: [11]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-plugins # key hit will not update cache
          java-version: ${{ matrix.javaVersion }}

      - name: Cache p2 plugin repositories
        uses: actions/cache@v3
        with:
          path: ./**/target/repository/
          key: p2-plugins-${{ github.sha }} # new key will cache

      - name: Build Plugins UpdateSite
        shell: bash
        run: |
          mvn package -DskipTests -f cobigen-plugins bundle:bundle -Pp2-bundle --projects !cobigen-javaplugin-parent/cobigen-javaplugin-model,!cobigen-openapiplugin-parent/cobigen-openapiplugin-model,!:plugins-parent,!cobigen-javaplugin-parent,!cobigen-openapiplugin-parent,!cobigen-templateengines ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }}
          mvn install -DskipTests -f cobigen-plugins bundle:bundle -Pp2-bundle p2:site --projects !cobigen-javaplugin-parent/cobigen-javaplugin-model,!cobigen-openapiplugin-parent/cobigen-openapiplugin-model,!:plugins-parent,!cobigen-javaplugin-parent,!cobigen-openapiplugin-parent,!cobigen-templateengines ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }}

  run-core-systemtest:
    needs: build-and-test-plugins
    strategy:
      fail-fast: false
      matrix:
        javaVersion: [11]
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-plugins # key hit will not update cache
          java-version: ${{ matrix.javaVersion }}
          jacoco-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-jacoco-${{ github.sha }}-core-systemtest # new key will cache

      - name: Run Core Systemtest
        shell: bash
        run: mvn install -f cobigen/cobigen-core-systemtest ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} ${{ env.MVN_TEST_COVERAGE }}

  build-and-test-eclipse-plugin:
    needs: build-plugins-p2
    strategy:
      fail-fast: false
      matrix:
        javaVersion: [11]
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-plugins # key hit will not update cache
          java-version: ${{ matrix.javaVersion }}
          jacoco-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-jacoco-${{ github.sha }}-eclipse # new key will cache
        
      - name: Cache Eclipse repository
        uses: actions/cache@v3
        with:
          path: ./**/eclipse/target/repository/
          key: p2-eclipse-${{ github.sha }} # new key will cache
      
      # After checkout we need to restore the built repositories
      - name: Restore P2 plugins repositories
        uses: actions/cache@v3
        with:
          path: ./**/target/repository/
          key: p2-plugins-${{ github.sha }} # key hit will not update cache
          enableCrossOsArchive: true
          
      - name: Run tests (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: xvfb-run -a mvn install -f cobigen-eclipse -Pp2-build ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} ${{ env.MVN_TEST_COVERAGE }}
        
      - name: Run tests (Windows/Mac)
        if: ${{ matrix.os != 'ubuntu-latest' }}
        shell: bash
        run: mvn install -f cobigen-eclipse -Pp2-build ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} ${{ env.MVN_TEST_COVERAGE }}

  build-and-test-maven-plugin:
    needs: build-and-test-plugins
    strategy:
      fail-fast: false
      matrix:
        javaVersion: [11]
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-maven # new key will cache
          maven-cache-restore-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-plugins
          java-version: ${{ matrix.javaVersion }}
          jacoco-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-jacoco-${{ github.sha }}-maven # new key will cache

      - name: Build & Test Maven Plugin
        shell: bash
        run: |
          mvn install -f cobigen-maven ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} ${{ env.MVN_TEST_COVERAGE }}

  build-and-test-cli:
    needs: build-and-test-templates
    strategy:
      fail-fast: false
      matrix:
        javaVersion: [11] # CLI does not support jdk 8 anymore
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-cli # new key will cache
          maven-cache-restore-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-templates
          java-version: ${{ matrix.javaVersion }}
          jacoco-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-jacoco-${{ github.sha }}-cli # new key will cache

      - name: Build & Test CLI
        shell: bash
        run: |
          mvn install -f cobigen-cli ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} ${{ env.MVN_TEST_COVERAGE }}

  build-and-test-templates:
    needs: build-and-test-maven-plugin
    strategy:
      fail-fast: false
      matrix:
        javaVersion: [11]
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-templates # new key will cache
          maven-cache-restore-key: ${{ runner.os }}-${{ matrix.javaVersion }}-maven-${{ github.sha }}-maven
          java-version: ${{ matrix.javaVersion }}
          jacoco-cache-key: ${{ runner.os }}-${{ matrix.javaVersion }}-jacoco-${{ github.sha }}-templates # new key will cache

      - name: Build & Test Templates
        shell: bash
        run: |
          mvn install -f cobigen-templates ${{ env.MVN_BATCH_MODE }} ${{ env.MVN_HTTP_OPTIMIZATION }} ${{ env.MVN_TEST_COVERAGE }}

  # Sonar Analysis is done in separate workflow (https://github.com/devonfw/cobigen/blob/master/.github/workflows/sonar-analysis.yml)
  # as of a workaround of potential secret leaking on PRs (https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)
  sonar-analysis-preparation:
    needs: [build-and-test-maven-plugin, build-and-test-templates, run-core-systemtest, build-and-test-eclipse-plugin, build-and-test-cli]
    runs-on: ubuntu-latest
    steps:
      - name: 'Prepare workflow context for transfer'
        env:
          # As a precaution, reference this value by an interpolated ENV var;
          # instead of interpolating user controllable input directly in the shell script.
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Save ENV for transfer
          {
            echo "PR_HEADSHA=${{ github.event.pull_request.head.sha }}"
            echo "PR_NUMBER=${{ github.event.pull_request.number }}"
            echo "PR_TITLE=${PR_TITLE}"
          } >> workflow.env
          tar --zstd -cf workflow.tar.zst workflow.env
      
      - name: 'Upload workflow context artifact'
        uses: actions/upload-artifact@v3
        with:
          name: maven-build-test-workflow-context
          path: workflow.tar.zst
          retention-days: 1
  
  release:
    needs: [build-and-test-maven-plugin, build-and-test-templates, run-core-systemtest, build-and-test-eclipse-plugin, build-and-test-cli]
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.repository, 'devonfw/') && github.ref == 'refs/heads/master' }}
    continue-on-error: true
    environment:
      name: maven-central
    outputs:
      release_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - uses: devonfw-actions/java-maven-setup@main
        with:
          maven-cache-key: cobigen-dep-${{ hashFiles('**/pom.xml') }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          BUILD_USER: ${{ secrets.BUILD_USER }}
          BUILD_USER_PASSWD: ${{ secrets.BUILD_USER_PASSWD }}
          BUILD_USER_EMAIL: ${{ secrets.BUILD_USER_EMAIL }}

      - name: Release
        id: release
        shell: bash
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          BUILD_USER: ${{ secrets.BUILD_USER }}
          BUILD_USER_PASSWD: ${{ secrets.BUILD_USER_PASSWD }}
          BUILD_USER_EMAIL: ${{ secrets.BUILD_USER_EMAIL }}
        run: ./release.sh silent skip-qa repo-mvn-settings
          
      - name: 'Get release tag'
        id: get_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1.1.0"
        env:
          GITHUB_TOKEN: "${{ secrets.GHA_TOKEN }}"

  github-release:
    needs: release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.repository, 'devonfw/') && github.ref == 'refs/heads/master' && needs.release.outputs.release_tag != '' }}
    steps:
      - uses: devonfw-actions/create-github-release@v1
        with:
          release_version: ${{ needs.release.outputs.release_tag }}
          GHA_TOKEN: ${{ secrets.GHA_TOKEN }}

